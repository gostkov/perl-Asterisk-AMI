Revision history for Perl extension AMI.

0.1.2
	- All AMI Objects can now also be used a normal IO Handles. It is not recommended
	that you read and write directly to them. This was added so you can add the AMI
	object to something like IO::Select for single threaded server applications

	- New module AMI::Common::Dev, which is currently empty. This will be where new functions
	specific to Asterisk 1.6+ will go. When the next LTS of Asterisk is released these will then
	be merged back into AMI::Common and new functions will be added here.

	- Cleaned up option handling

	- Fixed a bug in reading packets that could lead to 100% cpu usage when
	a remote end disconnected.

	- action() and get_action now return the response so long as the action completed
	and undef if an error happened or if it timed out.

	- check_response() and simple_action now return 0 on a failure, 1 on success, and
	undef on error or timeout.

	- get_event() now returns undef on error or timeout.

	- send_action now returns undef on error.

	- The above changes filter through to many AMI::Common functions as well.

	(If you get undef you should check the connection.)

	- check_connection changed to connected()

	- New Method process_packet(). Tells AMI to process input from asterisk.

	- 'EventPreempt' changed to 'FastEvents', behavior changed to immeditly proccess any events
	after processing a packet.

	- Added 'Timeout' option to constructor. Allows setting a default timeout on function calls.

	- Removed AutoAge and AutoClear settings and added 'BufferSize', which is the max number of Actions to hold 
	in memory. We basically use a ring buffer now for actions. Default is 30000.

	- Fixed a bug in AMI::Common where we were accidnetly using the channel name for positions for Queue Entries

	- Added AMI::Common::play_digits() which plays a series of DTMF tones on a channel.
	
	- Restructued the logic for sorting events and responses

	- Added key 'Handlers' to AMI::Events constructor which accepts a hash containing event handlers

	- Removed AMI::Events::event_mask() and AMI::Events::handlers(), instead use the constructor.

	- Events are now discarded if they are not enabled at object creation. (If you don't set 'Events' to something
	other than 'off' then we will discard any events not associated with an action that we get in for that object)

	- Useing AMI::Common or AMI::Common::Dev before AMI::Events will allow the AMI::Events object to use the methods
	in AMI::Common or AMI::Common:Dev

	- Various other code cleanups

0.1.1  Thu Jan 27 2010
	- Initial Release

